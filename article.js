<div  lang="en"><div data-post-id="b58264af8c21" data-source="post_page" data-collection-id="d0b105d10f0a" data-tracking-context="postPage" nodeIndex="31"><section name="4d9d" nodeIndex="34"><div nodeIndex="35"><div nodeIndex="36"><h2 name="f392" nodeIndex="38">When should you use each and&nbsp;why?</h2><figure name="c79f" nodeIndex="45"><div nodeIndex="44"><div nodeIndex="46"></div><!--IMG_1--></div></figure><p name="cb04" nodeIndex="47">Object-Oriented Programming is one of the most popular paradigms when it comes to building software, but as I learned more about JavaScript, I got introduced to Functional Programming, a completely different way of thinking. In this piece, I&rsquo;ll share with you what I&rsquo;ve learned and I&rsquo;ll explain it to you using my own examples.</p><p name="abad" nodeIndex="48">Example: You want to build a game where the main character is a student at Hogwarts and he&rsquo;s learning witchcraft from his teacher. So you create a <code nodeIndex="199">Student</code> class where your student object will be able to take tests, and you have another class called <code nodeIndex="200">Teacher</code><em nodeIndex="201">,</em> where the teacher object will be able to grade <code nodeIndex="202">Tests</code>.</p><figure name="01d1" nodeIndex="50"><div nodeIndex="49"><div nodeIndex="51"></div><div nodeIndex="52"><!--VIDEO_1--></div></div></figure><p name="7017" nodeIndex="53">Assuming you want to add some features like eating, sleeping, and walking, you&rsquo;ll end up with something that looks like this:</p><figure name="818e" nodeIndex="55"><div nodeIndex="54"><div nodeIndex="56"></div><div nodeIndex="57"><!--VIDEO_2--></div></div></figure><p name="d8a6" nodeIndex="58">The problem is that the code above doesn&rsquo;t follow the DRY principle, <strong nodeIndex="203">D</strong>on&rsquo;t <strong nodeIndex="204">R</strong>epeat <strong nodeIndex="205">Y</strong>ourself, so the solution is to create a <em nodeIndex="206">parent</em> class where we put the sleep, eat, and walk features. So we end up with something like this:</p><figure name="8392" nodeIndex="60"><div nodeIndex="59"><div nodeIndex="61"></div><div nodeIndex="62"><!--VIDEO_3--></div></div></figure><p name="7a3e" nodeIndex="63">Yaaay problem solved! Everyone&rsquo;s happy. However, a few months later, to make your game even more exciting, you decide to add another character&mdash;let&rsquo;s say you want to add a dragon. This is what you end up with:</p><figure name="7fb3" nodeIndex="65"><div nodeIndex="64"><div nodeIndex="66"></div><div nodeIndex="67"><!--VIDEO_4--></div></div></figure><p name="4ac6" nodeIndex="68">While this is great, you&rsquo;re not satisfied, so you decide to make the game more realistic by giving your dragon abilities just like the human characters. You want your dragon to be able to sleep and eat, so you end up with something like this:</p><figure name="4e9c" nodeIndex="70"><div nodeIndex="69"><div nodeIndex="71"></div><div nodeIndex="72"><!--VIDEO_5--></div></div></figure><p name="9604" nodeIndex="73">Now, this is working completely fine, but let&rsquo;s assume that in your game, the teacher, after careful study of witchcraft, was able to create a cape that allowed him to fly. Now comes the problem: <em nodeIndex="207">how</em> do you structure your project? You can&rsquo;t add the flying ability to the Human class because not all humans can fly, and you can&rsquo;t make the teacher inherit from the EvilDragon class, because the teacher can&rsquo;t breathe fire.</p><p name="c5da" nodeIndex="74">There is a solution: it&rsquo;s to add features, like breathing fire, that will never be used by the teacher object to make him able to fly. However, this is like asking for a banana and receiving a gorilla holding a banana. So now you&rsquo;ve hit a wall, and now you can&rsquo;t turn your game idea into a reality. Of course, you can repeat yourself, but since you&rsquo;re an excellent developer who cares about every line of code you write, you won&rsquo;t do that.</p><p name="9382" nodeIndex="75">Don&rsquo;t worry, there&rsquo;s a solution: It&rsquo;s called <em nodeIndex="208">Composition.</em></p><p name="edc2" nodeIndex="76">With inheritance, you structure your classes around what <em nodeIndex="209">they are</em>. With composition (and functional programming), you structure your classes on what <em nodeIndex="210">they do.</em></p><p name="c074" nodeIndex="77">By favoring composition over inheritance and thinking in terms of what things <em nodeIndex="211">do</em> rather than what things <em nodeIndex="212">are</em>, you free yourself of fragile and tightly coupled inheritance structures.</p><p name="f2cd" nodeIndex="78">Here&rsquo;s a snippet of what our code might look like in our game when we think in terms of objects:</p><figure name="16dd" nodeIndex="80"><div nodeIndex="79"><div nodeIndex="81"></div><div nodeIndex="82"><!--VIDEO_6--></div></div></figure><p name="9d1c" nodeIndex="83">When we write our project using a functional approach, we end up with a collection of stand-alone functions, each one of them serving a single purpose, which facilitates maintainability and makes debugging easier since we can predict the outcome of a function. When creating an object, we simply import all the functions that we need.</p><figure name="b388" nodeIndex="85"><div nodeIndex="84"><div nodeIndex="86"></div><div nodeIndex="87"><!--VIDEO_7--></div></div></figure><p name="183b" nodeIndex="88">Which one wins? Well, normally you would use inheritance when there is a <em nodeIndex="213">relation</em> between objects, like me, Mahmoud, I&rsquo;m a human, so I will inherit all of the things that a <code nodeIndex="214">Human</code> has. On the other hand, you would use composition, for example, when an object <em nodeIndex="215">has</em> a certain feature like, for example, a <code nodeIndex="216">Car</code> will have an <code nodeIndex="217">engine</code> component.</p><p name="e36d" nodeIndex="89">However, this is not completely true because a car is a vehicle and I, Mahmoud, have arms and I can lift things. So, in reality, you can follow either of these patterns.</p><p name="1d13" nodeIndex="90">Like most things in engineering, it depends. Composition or inheritance, you have to think about your codebase, your team, the feature you&rsquo;re working on and where it could all go in the future. Choose the right tool for the job.</p><h3 name="24d0" nodeIndex="91">Resources</h3><ul nodeIndex="93"><li name="ddfb" nodeIndex="92" childisonlyalink="1"><a href="https://en.wikipedia.org/wiki/Object_composition" data-href="https://en.wikipedia.org/wiki/Object_composition" rel="nofollow noopener" target="_blank">Composition (Wikipedia)</a></li><li name="c520" nodeIndex="94" childisonlyalink="1"><a href="https://en.wikipedia.org/wiki/Inheritance_%28object-oriented_programming%29" data-href="https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)" rel="nofollow noopener" target="_blank">Inheritance (Wikipedia)</a></li></ul></div></div></section></div></div>